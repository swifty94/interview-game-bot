import random
from utils import *
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

LOG_FORMAT = "[%(asctime)s] [%(levelname)-5s] [%(name)s] [%(funcName)s] [%(message)s] [line:%(lineno)d]"
DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

logger = logging.getLogger(__name__)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter(LOG_FORMAT, DATE_FORMAT))
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

# ======================= Bot Logic ========================= #

async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Roll dice to determine roles."""
    await update.message.reply_text("üé≤ –í–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞ –¥–≤–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–Ω–¥—Ä—ñ–π, –û–ª–µ–Ω–∞).")
    context.user_data["awaiting_players"] = True

async def process_names(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_players"):
        names = update.message.text.split(",")
        if len(names) != 2:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω–æ –¥–≤–∞ —ñ–º–µ–Ω—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É.")
            return
        player1, player2 = names[0].strip(), names[1].strip()
        roll1, roll2 = random.randint(1, 6), random.randint(1, 6)
        logger.info(f"Rolled dice: {player1}={roll1}, {player2}={roll2}")
        if roll1 > roll2:
            roles = f"üéâ **{player1}** - –Ü–Ω—Ç–µ—Ä–≤'—é–µ—Ä!\nüé§ **{player2}** - –ì—ñ—Å—Ç—å!"
        elif roll2 > roll1:
            roles = f"üéâ **{player2}** - –Ü–Ω—Ç–µ—Ä–≤'—é–µ—Ä!\nüé§ **{player1}** - –ì—ñ—Å—Ç—å!"
        else:
            roles = "ü§ù –ù—ñ—á–∏—è! –ö–∏–¥–∞–π—Ç–µ –∫—É–±–∏–∫–∏ —â–µ —Ä–∞–∑."
        await update.message.reply_text(f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∏–¥–∫–∞:\nüé≤ {player1}: {roll1}\nüé≤ {player2}: {roll2}\n\n{roles}")
        context.user_data["awaiting_players"] = False
        await send_main_menu(update)
async def send_main_menu(update: Update):
    """Send main menu buttons."""
    keyboard = [
        ["–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", "–î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"],
        ["–ë–ª—ñ—Ü", "–ù–æ—Ä–º–∞–ª"],
        ["–ö–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üéôÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User '{update.effective_user.username}' triggered /start")
    await update.message.reply_text(
        "üéôÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ **–Ü–Ω—Ç–µ—Ä–≤'—é –ë–æ—Ç–∞**! üéâ",
    )
    await send_main_menu(update)

async def question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = context.user_data.get("category", "normal")
    questions = get_random_questions(category)
    logger.info(f"User '{update.effective_user.username}' requested questions in category '{category}'")
    questions_text = "\n\n".join([f"‚ú® {q}" for q in questions])
    await update.message.reply_text(
        f"‚ú®–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n\nüìù **–í–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è:**\n\n{questions_text}"
    )
    await send_main_menu(update)

async def set_category_blitz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = "blitz"
    await update.message.reply_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: **–ë–ª—ñ—Ü** üéØ")
    await send_main_menu(update)

async def set_category_normal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = "normal"
    await update.message.reply_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: **–ù–æ—Ä–º–∞–ª** üéØ")
    await send_main_menu(update)

async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_question <—Ç–µ–∫—Å—Ç_–ø–∏—Ç–∞–Ω–Ω—è>")
        return
    question_text = " ".join(context.args)
    category = context.user_data.get("category", "normal")
    add_question_to_db(question_text, category)
    logger.info(f"User '{update.effective_user.username}' added question '{question_text}' to category '{category}'")
    await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –¥–æ–¥–∞–Ω–æ! ü•≥")
    await send_main_menu(update)

# ======================= Main Function ========================= #
def main():
    logger.info("++++++++++++++++" + "Starting InterviewBot" + "++++++++++++++++")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_question", add_question))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"), question))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ë–ª—ñ—Ü"), set_category_blitz))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ù–æ—Ä–º–∞–ª"), set_category_normal))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ö–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫–∏"), roll_dice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_names))

    logger.info("++++++++++++++++" + "InterviewBot is now UP and Polling!" + "++++++++++++++++")
    app.run_polling()